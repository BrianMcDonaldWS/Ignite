// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate should add markdown 1`] = `
"
    window.configuration = {
      searchIndex: [],
      markdown: [],
      plugins: [],
      setFirstLink() {
        console.log('Called setFirstLink before it was configured');
      },
      setSearchIndex() {
        console.log('Called setSearchIndex before it was configured');
      }
    };

    import React from 'react';
    import path from 'path';

    const e = React.createElement;

    function lazyLoad(CompProvider) {
      return class extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            Comp: null
          }
        }

        componentDidMount() {
          if (!this.state.Comp) {
            CompProvider().then(c => {
              this.setState({
                Comp: c.default
              });
            });
          }
        }

        render() {
          const { Comp } = this.state;
          return Comp ? React.createElement(Comp, this.props, null) : null;
        }
      }
    }

    const INDEX_PAGE = 'index.md';

    function trim(s, c) {
      if (c === \\"]\\") c = \\"\\\\\\\\]\\";
      if (c === \\"\\\\\\\\\\") c = \\"\\\\\\\\\\\\\\\\\\";
      return s.replace(new RegExp(
        \\"^[\\" + c + \\"]+|[\\" + c + \\"]+$\\", \\"g\\"
      ), \\"\\");
    }

    function isIndex(p) {
      return p.includes(INDEX_PAGE) && 
        (!process.env.navItems || 
          Object.values(process.env.navItems)
            .map(item => {
              return item === '/' ? INDEX_PAGE : path.join(trim(item, '/'), INDEX_PAGE);
            })
            .includes(p)
          );
    }

    function registerMarkdown(markdownPath, provider) {
      const comp = lazyLoad(provider);

      if(isIndex(markdownPath)) {
        window.configuration.markdown.push([path.join('/', markdownPath), comp, true, null]);
      } else {
        window.configuration.markdown.push([path.join('/', markdownPath), comp]);
      }
    }

    function registerPlugin(name, provider, options) {
      const comp = lazyLoad(provider);

      window.configuration.plugins.push([
        name,
        lazyLoad(provider),
        options
      ]);
    }
  
    import(/* webpackChunkName: \\"search-files\\" */ '/folder/search').then((files) => {
      window.configuration.setSearchIndex(files.default);
    })
  
        registerMarkdown(
          '../path/to/markdown.md',
          () => import(/* webpackChunkName: \\"markdown\\" */ 'path/to/markdown.md')
        );
      

        registerMarkdown(
          '../path/to/another-markdown.md',
          () => import(/* webpackChunkName: \\"another-markdown\\" */ 'path/to/another-markdown.md')
        );
      "
`;

exports[`generate should add plugins 1`] = `
"
    window.configuration = {
      searchIndex: [],
      markdown: [],
      plugins: [],
      setFirstLink() {
        console.log('Called setFirstLink before it was configured');
      },
      setSearchIndex() {
        console.log('Called setSearchIndex before it was configured');
      }
    };

    import React from 'react';
    import path from 'path';

    const e = React.createElement;

    function lazyLoad(CompProvider) {
      return class extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            Comp: null
          }
        }

        componentDidMount() {
          if (!this.state.Comp) {
            CompProvider().then(c => {
              this.setState({
                Comp: c.default
              });
            });
          }
        }

        render() {
          const { Comp } = this.state;
          return Comp ? React.createElement(Comp, this.props, null) : null;
        }
      }
    }

    const INDEX_PAGE = 'index.md';

    function trim(s, c) {
      if (c === \\"]\\") c = \\"\\\\\\\\]\\";
      if (c === \\"\\\\\\\\\\") c = \\"\\\\\\\\\\\\\\\\\\";
      return s.replace(new RegExp(
        \\"^[\\" + c + \\"]+|[\\" + c + \\"]+$\\", \\"g\\"
      ), \\"\\");
    }

    function isIndex(p) {
      return p.includes(INDEX_PAGE) && 
        (!process.env.navItems || 
          Object.values(process.env.navItems)
            .map(item => {
              return item === '/' ? INDEX_PAGE : path.join(trim(item, '/'), INDEX_PAGE);
            })
            .includes(p)
          );
    }

    function registerMarkdown(markdownPath, provider) {
      const comp = lazyLoad(provider);

      if(isIndex(markdownPath)) {
        window.configuration.markdown.push([path.join('/', markdownPath), comp, true, null]);
      } else {
        window.configuration.markdown.push([path.join('/', markdownPath), comp]);
      }
    }

    function registerPlugin(name, provider, options) {
      const comp = lazyLoad(provider);

      window.configuration.plugins.push([
        name,
        lazyLoad(provider),
        options
      ]);
    }
  
    import(/* webpackChunkName: \\"search-files\\" */ '/folder/search').then((files) => {
      window.configuration.setSearchIndex(files.default);
    })
  
        var options = {}

        
          registerPlugin(
            'first',
            () => import(/* webpackChunkName: \\"plugin-first\\" */ 'path/to/plugin.js'),
            options
          );
        

        
      

        var options = { 'options': '1337' };

        
          registerPlugin(
            'second',
            () => import(/* webpackChunkName: \\"plugin-second\\" */ 'path/to/another-plugin.js'),
            options
          );
        

        
      

        var options = {}

        
          registerPlugin(
            'npm',
            () => import(/* webpackChunkName: \\"plugin-npm\\" */ 'npm-package'),
            options
          );
        

        
      

        var options = {}

        

        
            registerPlugin(
              'es6',
              () => import(/* webpackChunkName: \\"plugin-es6\\" */ 'modules').then((res) => ({
                default: res['es6']
              })),
              options
            );
          
      

        var options = {}

        
          registerPlugin(
            'Default',
            () => import(/* webpackChunkName: \\"plugin-Default\\" */ 'another-package'),
            options
          );
        

        
            registerPlugin(
              'AnExport',
              () => import(/* webpackChunkName: \\"plugin-AnExport\\" */ 'another-package').then((res) => ({
                default: res['AnExport']
              })),
              options
            );
          

            registerPlugin(
              'AnotherExport',
              () => import(/* webpackChunkName: \\"plugin-AnotherExport\\" */ 'another-package').then((res) => ({
                default: res['AnotherExport']
              })),
              options
            );
          
      "
`;

exports[`stringify 1`] = `
"var options = {
    'number': '1',
    'string': 'string',
    'bool': 'true',
    'array': [() => 'string'],
    'functions': {
        'first': () => {
            return 1;
        }
    }
};"
`;
